import { Ed25519KeyIdentity } from "@dfinity/identity";
import { Principal } from "@dfinity/principal";
export declare function fromHexString(hexString: string): ArrayBuffer;
export interface Delegation {
    delegation: {
        pubkey: Uint8Array;
        expiration: bigint;
        targets?: Principal[];
    };
    signature: Uint8Array;
}
interface InternetIdentityAuthResponseSuccess {
    delegations: {
        delegation: {
            pubkey: Uint8Array;
            expiration: bigint;
            targets?: Principal[];
        };
        signature: Uint8Array;
    }[];
    userPublicKey: Uint8Array;
}
export declare class II {
    private readonly identity;
    constructor(identity: Ed25519KeyIdentity);
    getActor(): Promise<import("@dfinity/agent").ActorSubclass<Record<string, import("@dfinity/agent").ActorMethod<unknown[], unknown>>>>;
    get_pubKey_json(): import("@dfinity/identity/lib/cjs/identity/ed25519").JsonnableEd25519KeyIdentity;
    get_pubKey(): import("@dfinity/agent").PublicKey;
    prepare_delegation(address: string, json_pub_key: string, sig: string, maxTimeToLive: bigint): Promise<InternetIdentityAuthResponseSuccess>;
    get_delegation(address: string, arg: [Uint8Array, bigint]): Promise<InternetIdentityAuthResponseSuccess>;
}
export {};
