"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.II = exports.fromHexString = void 0;
const II_1 = require("./did/II");
const agent_1 = require("@dfinity/agent");
const js_sha256_1 = require("js-sha256");
function fromHexString(hexString) {
    var _a;
    return new Uint8Array(((_a = hexString.match(/.{1,2}/g)) !== null && _a !== void 0 ? _a : []).map(byte => parseInt(byte, 16))).buffer;
}
exports.fromHexString = fromHexString;
const ii_cid = 
// "rwlgt-iiaaa-aaaaa-aaaaa-cai"
"h3id2-uqaaa-aaaao-ajjoa-cai";
class II {
    constructor(identity) {
        this.identity = identity;
    }
    async getActor() {
        const agent = new agent_1.HttpAgent({
            identity: this.identity,
            host: "https://ic0.app"
        });
        return agent_1.Actor.createActor(II_1.idlFactory, {
            agent,
            canisterId: ii_cid,
        });
    }
    get_pubKey_json() {
        return this.identity.toJSON();
    }
    get_pubKey() {
        return this.identity.getPublicKey();
    }
    async prepare_delegation(address, json_pub_key, sig, maxTimeToLive) {
        const Actor = await this.getActor();
        const arg = [address.slice(2), json_pub_key, sig];
        const res = await Actor.prepare_delegation([maxTimeToLive], arg);
        return await this.get_delegation(address, res);
    }
    async get_delegation(address, arg) {
        const Actor = await this.getActor();
        const array = fromHexString(address.slice(2));
        const seed = js_sha256_1.sha256.digest(array);
        const callBack = async () => {
            return await Actor.get_delegation(seed, [...new Uint8Array(this.get_pubKey().toDer())], arg[1]);
        };
        const signed_delegation = await retryGetDelegation(callBack);
        const c = [
            [...arg[0]],
            {
                delegation: {
                    pubkey: Uint8Array.from(signed_delegation.delegation.pubkey),
                    expiration: BigInt(signed_delegation.delegation.expiration),
                    targets: undefined,
                },
                signature: Uint8Array.from(signed_delegation.signature),
            },
        ];
        const [userKey, parsed_signed_delegation] = c;
        const d = {
            delegations: [parsed_signed_delegation],
            userPublicKey: Uint8Array.from(userKey)
        };
        return d;
    }
}
exports.II = II;
const retryGetDelegation = async (callback, maxRetries = 5) => {
    for (let i = 0; i < maxRetries; i++) {
        // Linear backoff
        await new Promise((resolve) => {
            setInterval(resolve, 1000 * i);
        });
        const res = await callback();
        if ("signed_delegation" in res) {
            return res.signed_delegation;
        }
    }
    throw new Error(`Failed to retrieve a delegation after ${maxRetries} retries.`);
};
