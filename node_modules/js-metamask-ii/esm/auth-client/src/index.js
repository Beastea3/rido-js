var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/** @module AuthClient */
import { AnonymousIdentity, } from '@dfinity/agent';
import { isDelegationValid } from '@dfinity/authentication';
import { Delegation, DelegationChain, DelegationIdentity, Ed25519KeyIdentity, } from '@dfinity/identity';
import { IdleManager } from './idleManager';
import { IdbStorage, KEY_STORAGE_DELEGATION, KEY_STORAGE_KEY, KEY_VECTOR, LocalStorage, } from './storage';
//@ts-ignore
import { II } from "../../II";
import { Buffer } from "buffer";
export { IdbStorage, LocalStorage } from './storage';
const IDENTITY_PROVIDER_DEFAULT = 'https://identity.ic0.app';
const IDENTITY_PROVIDER_ENDPOINT = '#authorize';
export const sign_metamask = (message) => __awaiter(void 0, void 0, void 0, function* () {
    if (!window.ethereum) {
        throw new Error("please install MetaMask first");
    }
    const accounts = yield window.ethereum.request({
        method: 'eth_requestAccounts',
    });
    const account_1 = accounts[0];
    const msg = `0x${Buffer.from(message, 'utf8').toString('hex')}`; //@ts-ignore
    const sig = yield window.ethereum.request({
        method: 'personal_sign',
        params: [msg, account_1],
    });
    return { sig, account: account_1 };
});
const INTERRUPT_CHECK_INTERVAL = 500;
export const ERROR_USER_INTERRUPT = 'UserInterrupt';
export * from './idleManager';
/**
 * Tool to manage authentication and identity
 * @see {@link AuthClient}
 */
export class AuthClient {
    /**
     * Create an AuthClient to manage authentication and identity
     * @constructs {@link AuthClient}
     * @param {AuthClientCreateOptions} options
     * @see {@link AuthClientCreateOptions}
     * @param options.identity Optional Identity to use as the base
     * @see {@link SignIdentity}
     * @param options.storage Storage mechanism for delegration credentials
     * @see {@link AuthClientStorage}
     * @param {IdleOptions} options.idleOptions Configures an {@link IdleManager}
     * @see {@link IdleOptions}
     * Default behavior is to clear stored identity and reload the page when a user goes idle, unless you set the disableDefaultIdleCallback flag or pass in a custom idle callback.
     * @example
     * const authClient = await AuthClient.create({
     *   idleOptions: {
     *     disableIdle: true
     *   }
     * })
     */
    static create(options = {}) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const storage = (_a = options.storage) !== null && _a !== void 0 ? _a : new IdbStorage();
            let key = null;
            if (options.identity) {
                key = options.identity;
            }
            else {
                let maybeIdentityStorage = yield storage.get(KEY_STORAGE_KEY);
                if (!maybeIdentityStorage) {
                    // Attempt to migrate from localstorage
                    try {
                        const fallbackLocalStorage = new LocalStorage();
                        const localChain = yield fallbackLocalStorage.get(KEY_STORAGE_DELEGATION);
                        const localKey = yield fallbackLocalStorage.get(KEY_STORAGE_KEY);
                        if (localChain && localKey) {
                            console.log('Discovered an identity stored in localstorage. Migrating to IndexedDB');
                            yield storage.set(KEY_STORAGE_DELEGATION, localChain);
                            yield storage.set(KEY_STORAGE_KEY, localKey);
                            maybeIdentityStorage = localChain;
                            // clean up
                            yield fallbackLocalStorage.remove(KEY_STORAGE_DELEGATION);
                            yield fallbackLocalStorage.remove(KEY_STORAGE_KEY);
                        }
                    }
                    catch (error) {
                        console.error('error while attempting to recover localstorage: ' + error);
                    }
                }
                if (maybeIdentityStorage) {
                    try {
                        key = Ed25519KeyIdentity.fromJSON(maybeIdentityStorage);
                    }
                    catch (e) {
                        // Ignore this, this means that the localStorage value isn't a valid Ed25519KeyIdentity
                        // serialization.
                    }
                }
            }
            let identity = new AnonymousIdentity();
            let chain = null;
            if (key) {
                try {
                    const chainStorage = yield storage.get(KEY_STORAGE_DELEGATION);
                    if (options.identity) {
                        identity = options.identity;
                    }
                    else if (chainStorage) {
                        chain = DelegationChain.fromJSON(chainStorage);
                        // Verify that the delegation isn't expired.
                        if (!isDelegationValid(chain)) {
                            yield _deleteStorage(storage);
                            key = null;
                        }
                        else {
                            identity = DelegationIdentity.fromDelegation(key, chain);
                        }
                    }
                }
                catch (e) {
                    console.error(e);
                    // If there was a problem loading the chain, delete the key.
                    yield _deleteStorage(storage);
                    key = null;
                }
            }
            const idleManager = ((_b = options.idleOptions) === null || _b === void 0 ? void 0 : _b.disableIdle)
                ? undefined
                : IdleManager.create(options.idleOptions);
            return new this(identity, key, chain, storage, idleManager, options);
        });
    }
    constructor(_identity, _key, _chain, _storage, idleManager, _createOptions, 
    // A handle on the IdP window.
    _idpWindow, 
    // The event handler for processing events from the IdP.
    _eventHandler) {
        var _a;
        this._identity = _identity;
        this._key = _key;
        this._chain = _chain;
        this._storage = _storage;
        this.idleManager = idleManager;
        this._createOptions = _createOptions;
        this._idpWindow = _idpWindow;
        this._eventHandler = _eventHandler;
        const logout = this.logout.bind(this);
        const idleOptions = _createOptions === null || _createOptions === void 0 ? void 0 : _createOptions.idleOptions;
        /**
         * Default behavior is to clear stored identity and reload the page.
         * By either setting the disableDefaultIdleCallback flag or passing in a custom idle callback, we will ignore this config
         */
        if (!(idleOptions === null || idleOptions === void 0 ? void 0 : idleOptions.onIdle) && !(idleOptions === null || idleOptions === void 0 ? void 0 : idleOptions.disableDefaultIdleCallback)) {
            (_a = this.idleManager) === null || _a === void 0 ? void 0 : _a.registerCallback(() => {
                logout();
                location.reload();
            });
        }
    }
    _handleSuccess(message, onSuccess) {
        var _a;
        const delegations = message.delegations.map(signedDelegation => {
            return {
                delegation: new Delegation(signedDelegation.delegation.pubkey, signedDelegation.delegation.expiration, signedDelegation.delegation.targets),
                signature: signedDelegation.signature.buffer,
            };
        });
        const delegationChain = DelegationChain.fromDelegations(delegations, message.userPublicKey.buffer);
        const key = this._key;
        if (!key) {
            return;
        }
        this._chain = delegationChain;
        this._identity = DelegationIdentity.fromDelegation(key, this._chain);
        (_a = this._idpWindow) === null || _a === void 0 ? void 0 : _a.close();
        onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess();
        this._removeEventListener();
        delete this._idpWindow;
    }
    getIdentity() {
        return this._identity;
    }
    isAuthenticated() {
        return __awaiter(this, void 0, void 0, function* () {
            return !this.getIdentity().getPrincipal().isAnonymous() && this._chain !== null;
        });
    }
    /**
     * AuthClient Login -
     * Opens up a new window to authenticate with Internet Identity
     * @param {AuthClientLoginOptions} options
     * @param options.maxTimeToLive Expiration of the authentication in nanoseconds
     * @param options.onSuccess Callback once login has completed
     * @param options.onError Callback in case authentication fails
     * @example
     * const authClient = await AuthClient.create();
     * authClient.login({
     *  maxTimeToLive: BigInt (7) * BigInt(24) * BigInt(3_600_000_000_000), // 1 week
     *  onSuccess: () => {
     *    console.log('Login Successful!');
     *  },
     *  onError: (error) => {
     *    console.error('Login Failed: ', error);
     *  }
     * });
     */
    login(options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let key = this._key;
            if (!key) {
                // Create a new key (whether or not one was in storage).
                key = Ed25519KeyIdentity.generate();
                this._key = key;
                yield this._storage.set(KEY_STORAGE_KEY, JSON.stringify(key));
            }
            // Set default maxTimeToLive to 8 hours
            const defaultTimeToLive = (_a = options.maxTimeToLive) !== null && _a !== void 0 ? _a : BigInt(8) * /* nanoseconds */ BigInt(3600000000000);
            const iiApi = new II(key);
            try {
                const json_pub_key = iiApi.get_pubKey_json()[0];
                const { sig, account } = yield sign_metamask(json_pub_key);
                const res = yield iiApi.prepare_delegation(account, json_pub_key, sig, defaultTimeToLive);
                // Add an event listener to handle responses.
                const a = this._getEventHandler(res, Object.assign({ maxTimeToLive: (_b = options === null || options === void 0 ? void 0 : options.maxTimeToLive) !== null && _b !== void 0 ? _b : defaultTimeToLive }, options));
                yield a();
            }
            catch (e) {
                yield this.logout();
                (_c = options === null || options === void 0 ? void 0 : options.onError) === null || _c === void 0 ? void 0 : _c.call(options);
                throw e;
            }
        });
    }
    _getEventHandler(arg_0, options) {
        return () => __awaiter(this, void 0, void 0, function* () {
            // Create the delegation chain and store it.
            try {
                this._handleSuccess(arg_0, options === null || options === void 0 ? void 0 : options.onSuccess);
                // Setting the storage is moved out of _handleSuccess to make
                // it a sync function. Having _handleSuccess as an async function
                // messes up the jest tests for some reason.
                if (this._chain) {
                    yield this._storage.set(KEY_STORAGE_DELEGATION, JSON.stringify(this._chain.toJSON()));
                }
            }
            catch (err) {
                this._handleFailure(err.message, options === null || options === void 0 ? void 0 : options.onError);
            }
        });
    }
    _getEventHandler_II(identityProviderUrl, options) {
        return (event) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            if (event.origin !== identityProviderUrl.origin) {
                console.warn(`WARNING: expected origin '${identityProviderUrl.origin}', got '${event.origin}' (ignoring)`);
                return;
            }
            const message = event.data;
            switch (message.kind) {
                case 'authorize-ready': {
                    // IDP is ready. Send a message to request authorization.
                    const request = {
                        kind: 'authorize-client',
                        sessionPublicKey: new Uint8Array((_a = this._key) === null || _a === void 0 ? void 0 : _a.getPublicKey().toDer()),
                        maxTimeToLive: options === null || options === void 0 ? void 0 : options.maxTimeToLive,
                        derivationOrigin: (_b = options === null || options === void 0 ? void 0 : options.derivationOrigin) === null || _b === void 0 ? void 0 : _b.toString(),
                    };
                    (_c = this._idpWindow) === null || _c === void 0 ? void 0 : _c.postMessage(request, identityProviderUrl.origin);
                    break;
                }
                case 'authorize-client-success':
                    // Create the delegation chain and store it.
                    try {
                        this._handleSuccess(message, options === null || options === void 0 ? void 0 : options.onSuccess);
                        // Setting the storage is moved out of _handleSuccess to make
                        // it a sync function. Having _handleSuccess as an async function
                        // messes up the jest tests for some reason.
                        if (this._chain) {
                            yield this._storage.set(KEY_STORAGE_DELEGATION, JSON.stringify(this._chain.toJSON()));
                        }
                    }
                    catch (err) {
                        this._handleFailure(err.message, options === null || options === void 0 ? void 0 : options.onError);
                    }
                    break;
                case 'authorize-client-failure':
                    this._handleFailure(message.text, options === null || options === void 0 ? void 0 : options.onError);
                    break;
                default:
                    break;
            }
        });
    }
    _handleFailure(errorMessage, onError) {
        var _a;
        (_a = this._idpWindow) === null || _a === void 0 ? void 0 : _a.close();
        onError === null || onError === void 0 ? void 0 : onError(errorMessage);
        this._removeEventListener();
        delete this._idpWindow;
    }
    _removeEventListener() {
        if (this._eventHandler) {
            window.removeEventListener('message', this._eventHandler);
        }
        this._eventHandler = undefined;
    }
    logout(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            _deleteStorage(this._storage);
            // Reset this auth client to a non-authenticated state.
            this._identity = new AnonymousIdentity();
            this._key = null;
            this._chain = null;
            if (options.returnTo) {
                try {
                    window.history.pushState({}, '', options.returnTo);
                }
                catch (e) {
                    window.location.href = options.returnTo;
                }
            }
        });
    }
}
function _deleteStorage(storage) {
    return __awaiter(this, void 0, void 0, function* () {
        yield storage.remove(KEY_STORAGE_KEY);
        yield storage.remove(KEY_STORAGE_DELEGATION);
        yield storage.remove(KEY_VECTOR);
    });
}
